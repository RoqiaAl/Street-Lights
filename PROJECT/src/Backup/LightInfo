import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import moment from "moment";
import { DatePicker } from "antd";
import DefaultLayout from "../header";
import { createLight, updateLight } from "../../services/street-light";

import { useLocation } from "react-router-dom";

const LightsInfo = () => {
  const location = useLocation();
  const isUpdate = location.state?.isUpdate || false;
  const navigate = useNavigate();
  const [streetlightData, setStreetlightData] = useState(null);
  const [startDateTime, setStartDateTime] = useState(null);
  const [endDateTime, setEndDateTime] = useState(null);
  const [brightness, setBrightness] = useState("");
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const savedData = JSON.parse(localStorage.getItem("streetlightData"));
    if (savedData) {
      setStreetlightData(savedData);
      if (isUpdate) {
        setStartDateTime(
          savedData.startDateTime ? moment(savedData.startDateTime) : null
        );
        setEndDateTime(
          savedData.endDateTime ? moment(savedData.endDateTime) : null
        );
        setBrightness(savedData.brightness);
      }
    }
  }, [isUpdate]);

  const validateFields = () => {
    const newErrors = {};
    if (!startDateTime)
      newErrors.startDateTime = "Start Date & Time is required";
    if (!endDateTime) newErrors.endDateTime = "End Date & Time is required";
    if (startDateTime && endDateTime && endDateTime.isBefore(startDateTime)) {
      newErrors.endDateTime = "End Date & Time must be after Start Date & Time";
    }
    if (!brightness || brightness < 1 || brightness > 100) {
      newErrors.brightness = "Brightness must be between 1 and 100";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateFields()) return;
    const updatedData = {
      ...streetlightData,
      startDateTime: startDateTime
        ? startDateTime.format("YYYY-MM-DD h:mm A")
        : "",
      endDateTime: endDateTime ? endDateTime.format("YYYY-MM-DD h:mm A") : "",
      brightness,
    };
    if (isUpdate) {
      await updateLight(streetlightData._id, updatedData);
    } else {
      await createLight(updatedData);
    }
    localStorage.removeItem("streetlightData");
    navigate("/");
  };

  return (
    <DefaultLayout>
      <div className="bg-gray-100 min-h-screen">
        <h1 className="text-2xl font-semibold text-[#393838] mb-6">
          Streetlight Information
        </h1>

        {streetlightData ? (
          <>
            <p className="text-lg font-medium text-[#4C4A4A] mb-2">
              Streetlight Details:
            </p>
            <div className="bg-white p-6 rounded-lg shadow mb-8 grid grid-cols-4 gap-4">
              <div className="flex flex-col gap-4">
                <p className="text-black text-[16px] font-semibold">ID:</p>
                <span className="text-[#4C4A4A] text-[14px]">
                  {streetlightData.id}
                </span>
              </div>
              <div className="flex flex-col gap-4">
                <p className="text-black text-[16px] font-semibold">Zone: </p>
                <span className="text-[#4C4A4A] text-[14px]">
                  {streetlightData.zone}
                </span>
              </div>
              <div className="flex flex-col gap-4">
                <p className="text-black text-[16px] font-semibold">
                  Address:{" "}
                </p>
                <span className="text-[#4C4A4A] text-[14px]">
                  {streetlightData.address}
                </span>
              </div>
              <div className="flex flex-col gap-4">
                <p className="text-black text-[16px] font-semibold">Status: </p>
                <span className="text-[#4C4A4A] text-[14px]">
                  {streetlightData.status}
                </span>
              </div>
            </div>
          </>
        ) : (
          <p className="text-gray-500">No streetlight data found.</p>
        )}

        <div className="bg-white p-6 rounded-lg shadow">
          <div className="grid grid-cols-3 gap-4 mb-6">
            <div className="flex flex-col">
              <label className="font-medium text-gray-600 mb-1">
                Start Date & Time
              </label>
              <DatePicker
                showTime
                value={startDateTime}
                onChange={(dateTime) => setStartDateTime(dateTime)}
                format="YYYY-MM-DD h:mm A"
                className="w-full border-2 border-[#3D3D3D] rounded-md h-[44px]"
              />
              {errors.startDateTime && (
                <span className="text-red-500 text-sm">
                  {errors.startDateTime}
                </span>
              )}
            </div>
            <div className="flex flex-col">
              <label className="font-medium text-gray-600 mb-1">
                End Date & Time
              </label>
              <DatePicker
                showTime
                value={endDateTime}
                onChange={(dateTime) => setEndDateTime(dateTime)}
                format="YYYY-MM-DD h:mm A"
                className="w-full border-2 border-[#3D3D3D] rounded-md h-[44px]"
              />
              {errors.endDateTime && (
                <span className="text-red-500 text-sm">
                  {errors.endDateTime}
                </span>
              )}
            </div>
            <div className="flex flex-col">
              <label className="font-medium text-gray-600 mb-1">
                Brightness
              </label>
              <input
                type="number"
                placeholder="1-100"
                value={brightness}
                onChange={(e) => {
                  const value = parseInt(e.target.value, 10);
                  if (value >= 1 && value <= 100) {
                    setBrightness(value);
                  } else if (value < 1) {
                    setBrightness(1);
                  } else if (value > 100) {
                    setBrightness(100);
                  }
                }}
                className="p-2 border-2 border-[#3D3D3D] rounded-md h-[44px]"
                min="1"
                max="100"
              />
            </div>
          </div>

          <div className="flex justify-center">
            <button
              onClick={handleSave}
              className="px-8 py-2 text-white font-medium rounded-md"
              style={{
                background:
                  "linear-gradient(90deg, #3D68B0 1.67%, #84A8E6 47.17%, #3D68B0 100%)",
              }}
            >
              Save
            </button>
          </div>
        </div>
      </div>
    </DefaultLayout>
  );
};

export default LightsInfo;
